created: 20141118043825757
modified: 20141118050716210
tags: Statistics Code
title: Outlier
type: text/vnd.tiddlywiki

```python
#!/usr/bin/python
#
# peirce_dev.py
# created 16 Jul 2013
# updated 23 Oct 2014
#
#### MODULES ####
import numpy
import scipy.special
 
#### FUNCTION ####
def peirce_dev(N, n, m):
   """
   Name:     peirce_dev
   Input:    - int, total number of observations (N)
             - int, number of outliers to be removed (n)
             - int, number of model unknowns (m)
   Output:   float, squared error threshold (x2)
   Features: Returns the squared threshold error deviation for outlier 
             identification using Peirce's criterion based on Gould's
             methodology
   """
   # Assign floats to input variables:
   N = float(N)
   n = float(n)
   m = float(m)
   #
   # Check number of observations:
   if N > 1:
      # Calculate Q (Nth root of Gould's equation B):
      Q = (n**(n/N)*(N - n)**((N - n)/N))/N
      #
      # Initialize R values (as floats)
      Rnew = 1.0  
      Rold = 0.0  # <- Necessary to prompt while loop
      #
      # Start iteration to converge on R:
      while ( abs(Rnew - Rold) > (N*2.0e-16) ):
         # Calculate Lamda 
         # (1/(N-n)th root of Gould's equation A'):
         ldiv = Rnew**n
         if ldiv == 0:
            ldiv = 1.0e-6
         Lamda = ((Q**N)/(ldiv))**(1.0/(N - n))
         #
         # Calculate x-squared (Gould's equation C):
         x2 = 1.0 + (N - m - n)/n*(1.0 - Lamda**2.0)
         #
         # If x2 goes negative, return 0:
         if x2 < 0:
            x2 = 0.0
            Rold = Rnew
         else:
            # Use x-squared to update R (Gould's equation D):
            Rold = Rnew
            Rnew = (
               numpy.exp((x2 - 1)/2.0)*
               scipy.special.erfc(numpy.sqrt(x2)/numpy.sqrt(2.0))
               )
         #
   else:
      x2 = 0.0
   return x2
```